/**
* First mind about C++ Script  was 21.01.22021 in Antoni Kiedos' head.
* =====================================================================
* C++ Script 2021 Standard
* 1. Types
* C++ Script later named by CS is staticly-typed programming language with types inferention and newline-terminated lines.
* All types inherit from IObject base class. Types which inherit directly from IObject are: Var, IIO, Container.
* From these types inherit: from Var: INumber, IString, Enum, Struct, Unit, Func, Proc; from IIO: StdIO (Standard IO - console), FIO (File IO) and StrIO (String IO).
* From INumber inherit: Real and Complex, which contains Real instance. From IString: String, StringBuff. From Enum inherit Bool, which, together with Union type are final.
* From type Struct inherit Union and Class from what inherits Interface. Type Unit, which is like C++'s void (only difference is that void type has not any value) or Python's None or Q#'s Unit,
* has only one value called unit. Type Func is for functions and type Proc, which inherits from Func, is for procedures. *IO types are final.
* From Real inherit Int and Float. String types are final. Types Union, Interface and Proc are final. From Int inherit Char and UInt.
* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Diagram:                                                                  |
*           -> Class -i> Interface          --> Bool                        |
*           |                              /i     --> Complex               |
*           /i /---i-> Union        /-i-> Enum   /      ^         /--> UInt |
*        Struct <i----------------\/            /i      |c       /i         |
*               /--i- IObject -i> Var -i> INumber -i> Real -i> Int -i> Char |
*  Container  <-      |i         i/ |i \i               \i                  |
*  |                  v          |  \   ---> IString     \--> Float         |
*  v        StdIO <-- IIO        v   -> Unit    |i \__i                     |
*  Some containers... |i \i      Function   ^   v       \--> StringBuff     |
*                     v   --> FIO       \i  c\  String                      |
*                     StrIO              --> Proc                           |
* ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* =======================================================================================================================================================================================
* 2. Keywords
* Most keywords are the same as their C++'s synonyms, but there are also changed keywords:
* - paste "iostream" // #include<iostream>
* - use ns std # using namespace std;
* - Func Int -> Char** -> Int Main(argc, argv) do #^ int main(int argc, char** argv) { ^#
* - Var x ; auto x = 0; (When there is Var declaration, then is 0 deduced)
* - until x != 0 -- while(x == 0)
* - unless x =/= 2 then ;; if(!(x neq 2)) { (Of course in CS there are also while and if
* - if x > 0 then x plusassign 2 else if x == 0 then x -= 2 else x++ endif (* full if statement *)
* - while x greater 0 do dec x end com full while loop
* As you can see, there are a lot of comment characters and alphabetic chars for operators. This is unwanted inspiration from VBA -- variables used by parser and transpiler.
* Syntax: meta meta_variable ONEOFPOSSIBLEVALUES
* Example: meta neq_op SLASH -- unequality operator is now '=/='
* Second example: meta multiline_comment DDOLLAR $$ now multi line comment is begun and terminated by 2 $ chars $$
* It is possible to change declared earlier meta variables an to declare it not at beginning, but it is not recommended, because it is in contradition with clean code rules.
* More about keywords is in other sections
* ============================================================================================================================================================================
* 3. Standard Library
* - all of C++'s standard libraries + https://github.com/nlohmann/json (nlohmann/json.hpp) + https://github.com/Dobiasd/FunctionalPlus (fplus/fplus.hpp and its dependicies)
* + https://github.com/kennytm/utils/blob/master/traits.hpp (function traits) + https://github.com/kennytm/utils/blob/master/property.(hpp|cpp) (properties in C++) + https://github.com/ankiedos/extension-cmath/blob/master/ext_cmath.hpp (physical and mathematical extension to cmath, cna be incorporated with library-plus-plus)
* + https://github.com/ankiedos/library-plus-plus (extended C++ standard library)
* and in the future probably more...
* =========================================================================================================================================================================================================================================================================================
* 4. Language
* 4.1. Program Structure
*
* meta comment REM
* meta multiline_comment SLASHASTERISK
* meta neq_op SLASH
* meta logical_ops ALPHA
* paste "iostream" rem for print()
* paste "fplus/fplus.hpp" rem for interact()
* use ns std
* use ns fplus
* Func Real -> Float Square(x) do
*   return x ^ 2 rem CS right associative power operator
* end
* Func Int Main() do rem Main() function args are optional like in C++ (In interpreted CS dialect Main is not required)
*   Int x = 0
*   print("Give a number: ") rem transpiled to cout <<
*   interact(Square, x) rem does cin >>, then input gives to x and x gives to Square and prints result
*   return 0
* end
**/
/** Remark: 86: In later standards there will be print statement instead of print() function and C++ STL will be in cpp::std ns (there will be also extern "C++").
**/
/** Remark 2: 102: cppScript ns will be std ns. Stdlib code can be also in C++, but wrapped with extern "C++" (or CPP do code _here end) and CS code can be used in C++,
* but it must be transformed by transpiler's pragma to keep C++ source or with transpiler's option. CS can also be used in C++ like PHP with extern "C++S".
**/
/** Remark 3: 30, 42, 51, 81, 84: Func in interpreted and Function in transpiled.
**/